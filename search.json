[{"title":"CSS学习笔记","url":"/2019/11/17/CSS学习笔记/","content":"# 概述\n\nCSS(Cascading Style Sheets)\n\nCSS通常称为CSS样式表或层叠样式表（级联样式表），主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。\n\nCSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。\n\n## 样式规则\n\nCSS具体格式如下：\n\n![](CSS/css_1.jpg) \n\n```HTML\n在上面的样式规则中:\n1.选择器用于指定CSS样式作用的HTML对象，花括号内是对该对象设置的具体样式。\n2.属性和属性值以“键值对”的形式出现。\n3.属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。\n4.属性和属性值之间用英文“:”连接。\n5.多个“键值对”之间用英文“;”进行区分。\n可以用段落 和 表格的对齐的演示。\n```\n\n## CSS注释\n\n```HTML\nCSS规则是使用     /*  需要注释的内容  */  进行注释的，即在需要注释的内容前使用 “/*” 标记开始注释，在内容的结尾使用 “*/”结束。\n例如：\np {\n  font-size: 14px;                 /* 所有的字体是14像素大小*/\n}\n```\n\n\n\n# CSS样式属性\n\n## font-size:字号大小\n\nfont-size属性用于设置字号，该属性的值可以使用相对长度单位，也可以使用绝对长度单位。其中，相对长度单位比较常用，推荐使用像素单位px，绝对长度单位使用较少。具体如下：\n\n| 相对长度单位 | 说明                           |\n| ------------ | ------------------------------ |\n| em           | 相对于当前对象内文本的字体尺寸 |\n| px           | 像素,最常用                    |\n| 绝对长度单位 | 说明                           |\n| in           | 英寸                           |\n| cm           | 厘米                           |\n| mm           | 毫米                           |\n| pt           | 点                             |\n\n## font-family:字体\n\nfont-family属性用于设置字体。网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑，可以使用如下CSS样式代码：\n\np{ font-family:\"微软雅黑\";}\n\n可以同时指定多个字体，中间以逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体。\n\n```HTML\n1. 现在网页中普遍使用14px+。\n2. 尽量使用偶数的数字字号。ie6等老式浏览器支持奇数会有bug。\n3. 各种字体之间必须使用英文状态下的逗号隔开。\n4. 中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。\n5. 如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: \"Times New Roman\";。\n6. 尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。\n```\n\n## CSS Unicode字体\n\n在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。xp 系统不支持 类似微软雅黑的中文。\n\n方案一： 你可以使用英文来替代。 比如 font-family:\"Microsoft Yahei\"。\n\n方案二： 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。\nfont-family: \"\\5FAE\\8F6F\\96C5\\9ED1\"，表示设置字体为“微软雅黑”。\n\n可以通过escape()  来测试属于什么字体。\n\n| 字体名称    | 英文名称        | Unicode 编码         |\n| ----------- | --------------- | -------------------- |\n| 宋体        | SimSun          | \\5B8B\\4F53           |\n| 新宋体      | NSimSun         | \\65B0\\5B8B\\4F53      |\n| 黑体        | SimHei          | \\9ED1\\4F53           |\n| 微软雅黑    | Microsoft YaHei | \\5FAE\\8F6F\\96C5\\9ED1 |\n| 楷体_GB2312 | KaiTi_GB2312    | \\6977\\4F53_GB2312    |\n| 隶书        | LiSu            | \\96B6\\4E66           |\n| 幼园        | YouYuan         | \\5E7C\\5706           |\n| 华文细黑    | STXihei         | \\534E\\6587\\7EC6\\9ED1 |\n| 细明体      | MingLiU         | \\7EC6\\660E\\4F53      |\n| 新细明体    | PMingLiU        | \\65B0\\7EC6\\660E\\4F53 |\n\n## font-weight:字体粗细\n\n字体加粗除了用 b  和 strong 标签之外，可以使用CSS 来实现，但是CSS 是没有语义的\n\nfont-weight属性用于定义字体的粗细，其可用属性值：normal、bold、bolder、lighter、100~900（100的整数倍）。数字 400 等价于 normal，而 700 等价于 bold。\n\n## font-style:字体风格\n\n字体倾斜除了用 i  和 em 标签之外，可以使用CSS 来实现，但是CSS 是没有语义的。\n\nfont-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：\n\nnormal：默认值，浏览器会显示标准的字体样式。\n\nitalic：浏览器会显示斜体的字体样式。\n\noblique：浏览器会显示倾斜的字体样式。\n\n## font:综合设置字体样式 \n\n```HTML\nfont属性用于对字体样式进行综合设置，其基本语法格式如下：\n\n选择器{font: font-style  font-weight  font-size/line-height  font-family;}\n\n使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开。\n注意：其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。\n```\n\n# 选择器\n\n## 标签选择器\n\n标签选择器是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。其基本语法格式如下：\n\n```HTML\n标签名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }  或者\n元素名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n```\n\n标签选择器最大的优点是能快速为页面中同类型的标签统一样式，同时这也是他的缺点，不能设计差异化样式。\n\n## 类选择器\n\n类选择器使用“.”（英文点号）进行标识，后面紧跟类名，其基本语法格式如下：\n\n```HTML\n.类名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n 标签调用的时候用 class=“类名”  即可。\n类选择器最大的优势是可以为元素对象定义单独或相同的样式。\n1.长名称或词组可以使用中横线来为选择器命名。\n2.不建议使用“_”下划线来命名CSS选择器。\n3.不要纯数字、中文等命名， 尽量使用英文字母来表示。\n\n案例:谷歌logo\n<head>\n        <meta charset=\"utf-8\">\n        <style>\n        span {\n          font-size: 100px;\n        }\n        .blue {\n          color: blue;\n        }\n        .red {\n          color: red;\n        }\n        .orange {\n      color: orange;\n        }\n    .green {\n      color: green;\n    }\n        </style>\n    </head>\n    <body>\n      <span class=\"blue\">G</span>\n      <span class=\"red\">o</span>\n      <span class=\"orange\">o</span>\n      <span class=\"blue\">g</span>\n      <span class=\"green\">l</span>\n      <span class=\"red\">e</span>\n    </body>\n```\n\n## 多类名选择器\n\n```HTML\n我们可以给标签指定多个类名，从而达到更多的选择目的。\n注意:\n1. 样式显示效果跟HTML元素中的类名先后顺序没有关系,受CSS样式书写的上下顺序有关。\n2. 各个类名中间用空格隔开。\n例子:\n<div class=\"pink fontWeight font20\">亚瑟</div>\n<div class=\"font20\">刘备</div>\n<div class=\"font14 pink\">安其拉</div>\n<div class=\"font14\">貂蝉</div>\n```\n\n## id选择器\n\n```HTML\nid选择器使用“#”进行标识，后面紧跟id名，其基本语法格式如下：\n#id名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n该语法中，id名即为HTML元素的id属性值，大多数HTML元素都可以定义id属性，元素的id值是唯一的，只能对应于文档中某一个具体的元素。id选择器用法基本和类选择器相同。\n\nid选择器和类选择器区别：\nW3C标准规定，在同一个页面内，不允许有相同名字的id对象出现，但是允许相同名字的class。\n```\n\n## 通配符选择器\n\n通配符选择器用“*”号表示，他是所有选择器中作用范围最广的，能匹配页面中所有的元素。其基本语法格式如下：\n\n```HTML\n* { 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }\n例如下面的代码，使用通配符选择器定义CSS样式，清除所有HTML标记的默认边距。\n* {\n  margin: 0;                    /* 定义外边距*/\n  padding: 0;                   /* 定义内边距*/\n}\n```\n\n## 伪类选择器\n\n 伪类选择器用于向某些选择器添加特殊的效果。比如给链接添加特殊效果， 比如可以选择 第1个，第n个元素。\n\n```HTML\n为了和类选择器相区别，  类选择器是一个点 比如 .demo {}   而我们的伪类 用 2个点 就是 冒号  比如  :link{}\n```\n\n### 链接伪类选择器\n\n- :link      /* 未访问的链接 */\n- :visited   /* 已访问的链接 */\n- :hover     /* 鼠标移动到链接上 */\n- :active    /* 选定的链接 */\n\n\n   注意写的时候，他们的顺序尽量不要颠倒  按照  lvha 的顺序。\n\n```HTML\na {   /* a是标签选择器  所有的链接 */\n      font-weight: 700;\n      font-size: 16px;\n      color: gray;\n    }\na:hover {   /* :hover 是链接伪类选择器 鼠标经过 */\n      color: red; /*  鼠标经过的时候，由原来的 灰色 变成了红色 */\n}\n```\n\n### 结构(位置)伪类选择器（CSS3)\n\n- :first-child :选取属于其父元素的首个子元素的指定选择器\n- :last-child :选取属于其父元素的最后一个子元素的指定选择器\n- :nth-child(n) ： 匹配属于其父元素的第 N 个子元素，不论元素的类型\n- :nth-last-child(n) ：选择器匹配属于其元素的第 N 个子元素的每个元素，不论元素的类型，从最后一个子元素开始计数。\n  n 可以是数字、关键词或公式\n\n```HTML\nli:first-child { /*  选择第一个孩子 */\n            color: pink; \n          }\nli:last-child {   /* 最后一个孩子 */\n            color: purple;\n          }\nli:nth-child(4) {   /* 选择第4个孩子  n  代表 第几个的意思 */ \n        color: skyblue;\n          }\n```\n\n### 目标伪类选择器(CSS3)\n\n :target目标伪类选择器 :选择器可用于选取当前活动的目标元素\n\n```HTML\n:target {\n    color: red;\n    font-size: 30px;\n}\n```\n\n# CSS外观属性\n\n## color:文本颜色\n\ncolor属性用于定义文本的颜色，其取值方式有如下3种：\n\n1.预定义的颜色值，如red，green，blue等。\n\n2.十六进制，如#FF0000，#FF6600，#29D794等。实际工作中，十六进制是最常用的定义颜色的方式。\n\n3.RGB代码，如红色可以表示为rgb(255,0,0)或rgb(100%,0%,0%)。\n\n需要注意的是，如果使用RGB代码的百分比颜色值，取值为0时也不能省略百分号，必须写为0%。\n\n## line-height:行间距\n\nline-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。line-height常用的属性值单位有三种，分别为像素px，相对值em和百分比%，实际中使用最多的是像素px\n\n## text-align:水平对齐方式\n\ntext-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性。其可用属性值如下：\n\nleft：左对齐（默认值）\n\nright：右对齐\n\ncenter：居中对齐\n\n## text-indent:首行缩进\n\ntext-indent属性用于设置首行文本的缩进，其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值, 建议使用em作为设置单位。\n\n1em 就是一个字的宽度   如果是汉字的段落， 1em 就是一个汉字的宽度\n\n## letter-spacing:字间距\n\nletter-spacing属性用于定义字间距，所谓字间距就是字符与字符之间的空白。其属性值可为不同单位的数值，允许使用负值，默认为normal。\n\n## word-spacing:单词间距\n\nword-spacing属性用于定义英文单词之间的间距，对中文字符无效。和letter-spacing一样，其属性值可为不同单位的数值，允许使用负值，默认为normal。\n\nword-spacing和letter-spacing均可对英文进行设置。不同的是letter-spacing定义的为字母之间的间距，而word-spacing定义的为英文单词之间的间距。\n\n## 颜色半透明(css3)\n\n文字颜色到了CSS3我们可以采取半透明的格式了语法格式如下：\n\n```HTML\n color: rgba(r,g,b,a)  a 是alpha  透明的意思  取值范围 0~1之间    color: rgba(0,0,0,0.3)  \n```\n\n### 文字阴影(CSS3)\n\n我们可以给我们的文字添加阴影效果了  Shadow  影子 \n\n```HTML\ntext-shadow:水平位置 垂直位置 模糊距离 阴影颜色;\ntext-shadow:3px 4px 5px rgba(0,0,0,.5);\n```\n\n| 值       | 描述                             |\n| -------- | -------------------------------- |\n| h-shadow | 必需。水平阴影的位置。允许负值。 |\n| v-shadow | 必需。垂直阴影的位置。允许负值。 |\n| blur     | 可选。模糊的距离。               |\n| color    | 可选。阴影的颜色。参阅CSS颜色值  |\n\n# 引入CSS样式表(书写位置)\n\n### 内部样式表\n\n```HTML\n内嵌式是将CSS代码集中写在HTML文档的head头部标签中，并且用style标签定义，其基本语法格式如下：\n<head>\n<style type=\"text/CSS\">\n    选择器 {属性1:属性值1; 属性2:属性值2; 属性3:属性值3;}\n</style>\n</head>\n语法中，style标签一般位于head标签中title标签之后，也可以把他放在HTML文档的任何地方。\ntype=\"text/CSS\"  在html5中可以省略， 写上也比较符合规范， 所以这个地方可以写也可以省略。\n```\n\n### 行内式（内联样式）\n\n```HTML\n内联样式，又有人称行内样式、行间样式、内嵌样式。是通过标签的style属性来设置元素的样式，其基本语法格式如下：\n<标签名 style=\"属性1:属性值1; 属性2:属性值2; 属性3:属性值3;\"> 内容 </标签名>\n语法中style是标签的属性，实际上任何HTML标签都拥有style属性，用来设置行内式。其中属性和值的书写规范与CSS样式规则相同，行内式只对其所在的标签及嵌套在其中的子标签起作用。\n```\n\n### 外部样式表（外链式）\n\n```HTML\n链入式是将所有的样式放在一个或多个以.CSS为扩展名的外部样式表文件中，通过link标签将外部样式表文件链接到HTML文档中，其基本语法格式如下：\n<head>\n  <link href=\"CSS文件的路径\" type=\"text/CSS\" rel=\"stylesheet\" />\n</head>\n该语法中，link标签需要放在head头部标签中，并且必须指定link标签的三个属性，具体如下：\nhref：定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。\ntype：定义所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。\nrel：定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。\n```\n\n### 三种样式表总结\n\n| 样式表     | 优点                     | 缺点                     | 使用情况       | 控制范围           |\n| ---------- | ------------------------ | ------------------------ | -------------- | ------------------ |\n| 行内样式表 | 书写方便，权重高         | 没有实现样式和结构相分离 | 较少           | 控制一个标签（少） |\n| 内部样式表 | 部分结构和样式相分离     | 没有彻底分离             | 较多           | 控制一个页面（中） |\n| 外部样式表 | 完全实现结构和样式相分离 | 需要引入                 | 最多，强烈推荐 | 控制整个站点（多） |\n\n# 标签显示模式（display）\n\nHTML标签一般分为块标签和行内标签两种类型，它们也称块元素和行内元素。具体如下：\n\n## 块级元素(block-level)\n\n```HTML\n每个块元素通常都会独自占据一整行或多整行，可以对其设置宽度、高度、对齐等属性，常用于网页布局和网页结构的搭建。\n常见的块元素有<h1>~<h6>、<p>、<div>、<ul>、<ol>、<li>等，其中<div>标签是最典型的块元素。\n 块级元素的特点：\n（1）总是从新行开始\n（2）高度，行高、外边距以及内边距都可以控制。\n（3）宽度默认是容器的100%\n（4）可以容纳内联元素和其他块元素。\n```\n\n## 行内元素(inline-level)\n\n```HTML\n行内元素（内联元素）不占有独立的区域，仅仅靠自身的字体大小和图像尺寸来支撑结构，一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式。\n常见的行内元素有<a>、<strong>、<b>、<em>、<i>、<del>、<s>、<ins>、<u>、<span>等，其中<span>标签最典型的行内元素。\n 行内元素的特点：\n（1）和相邻行内元素在一行上。\n（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。\n（3）默认宽度就是它本身内容的宽度。\n（4）行内元素只能容纳文本或则其他行内元素。（a特殊）\n注意：\n1. 只有文字才能组成段落.因此 p 里面不能放块级元素，同理还有这些标签h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。\n2. 链接里面不能再放链接。\n```\n\n## 块级元素和行内元素区别\n\n```HTML\n块级元素的特点：\n（1）总是从新行开始\n（2）高度，行高、外边距以及内边距都可以控制。\n（3）宽度默认是容器的100%\n（4）可以容纳内联元素和其他块元素。\n行内元素的特点：\n（1）和相邻行内元素在一行上。\n（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。\n（3）默认宽度就是它本身内容的宽度。\n（4）行内元素只能容纳文本或则其他行内元素。\n\n```\n\n## 行内块元素（inline-block）\n\n```HTML\n在行内元素中有几个特殊的标签——<img />、<input />、<td>，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。\n行内块元素的特点：\n（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。\n（2）默认宽度就是它本身内容的宽度。\n（3）高度，行高、外边距以及内边距都可以控制。\n```\n\n## 标签显示模式转换 display\n\n```HTML\n块转行内：display:inline;\n行内转块：display:block;\n块、行内元素转换为行内块： display: inline-block;\n```\n\n# CSS复合选择器\n\n复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的,目的是为了可以选择更准确更精细的目标元素标签。\n\n## **交集选择器**\n\n交集选择器由两个选择器构成，其中第一个为标签选择器，第二个为class选择器，两个选择器之间不能有空格，如h3.special。\n\n## **并集选择器**\n\n并集选择器（CSS选择器分组）是各个选择器通过<strong style=\"color:#f00\">逗号</strong>连接而成的，任何形式的选择器（包括标签选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，或部分相同，就可以利用并集选择器为它们定义相同的CSS样式。如.class,h3。\n\n## **后代选择器**\n\n后代选择器又称为包含选择器，用来选择元素或元素组的后代，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。如.class h3。\n\n## **子元素选择器**\n\n子元素选择器只能选择作为某元素子元素的元素。其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 &gt; 进行连接，注意，这里的子指的是亲儿子不包含孙子重孙子之类。符号左右两侧各保留一个空格。如.class > h3。\n\n## **属性选择器**\n\n选取标签带有某些特殊属性的选择器 我们成为属性选择器\n\n```HTML\n/* 获取到 拥有 该属性的元素 */\ndiv[class^=font] { /*  class^=font 表示 font 开始位置就行了 */\n      color: pink;\n    }\ndiv[class$=footer] { /*  class$=footer 表示 footer 结束位置就行了 */\n      color: skyblue;\n    }\ndiv[class*=tao] { /* class*=tao  *=  表示tao 在任意位置都可以 */\n      color: green;\n    }\n<div class=\"font12\">属性选择器</div>\n    <div class=\"font12\">属性选择器</div>\n    <div class=\"font24\">属性选择器</div>\n    <div class=\"font24\">属性选择器</div>\n    <div class=\"font24\">属性选择器</div>\n    <div class=\"24font\">属性选择器123</div>\n    <div class=\"sub-footer\">属性选择器footer</div>\n    <div class=\"jd-footer\">属性选择器footer</div>\n    <div class=\"news-tao-nav\">属性选择器</div>\n    <div class=\"news-tao-header\">属性选择器</div>\n    <div class=\"tao-header\">属性选择器</div>\n```\n\n## 伪元素选择器（CSS3)\n\n```HTML\n1. E::first-letter文本的第一个单词或字（如中文、日文、韩文等）\n2. E::first-line 文本第一行；\n3. E::selection 可改变选中文本的样式；\np::first-letter {\n  font-size: 20px;\n  color: hotpink;\n}\n\n/* 首行特殊样式 */\np::first-line {\n  color: skyblue;\n}\n\np::selection {\n  /* font-size: 50px; */\n  color: orange;\n}\n4、E::before和E::after\n在E元素内部的开始位置和结束位创建一个元素，该元素为行内元素，且必须要结合content属性使用。\ndiv::befor {\n  content:\"开始\";\n}\ndiv::after {\n  content:\"结束\";\n}\nE:after、E:before 在旧版本里是伪元素，CSS3的规范里“:”用来表示伪类，“::”用来表示伪元素，但是在高版本浏览器下E:after、E:before会被自动识别为E::after、E::before，这样做的目的是用来做兼容处理。\n\":\" 与 \"::\" 区别在于区分伪类和伪元素\n```\n\n# CSS书写规范\n\n## 空格规范\n\n```HTML\n【强制】 选择器 与 { 之间必须包含空格。\n示例： .selector { }\n【强制】 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。\n示例：\nfont-size: 12px;\n```\n\n## 选择器规范\n\n```html\n【强制】 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。\n示例：\n/* good */\n.post,\n.page,\n.comment {\n    line-height: 1.5;\n}\n\n/* bad */\n.post, .page, .comment {\n    line-height: 1.5;\n}\n【建议】 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。\n示例：\n/* good */\n#username input {}\n.comment .avatar {}\n\n/* bad */\n.page .header .login #username input {}\n.comment div * {}\n```\n\n## 属性规范\n\n```HTML\n【强制】 属性定义必须另起一行。\n示例：\n/* good */\n.selector {\n    margin: 0;\n    padding: 0;\n}\n\n/* bad */\n.selector { margin: 0; padding: 0; }\n【强制】 属性定义后必须以分号结尾。\n\n示例：\n/* good */\n.selector {\n    margin: 0;\n}\n\n/* bad */\n.selector {\n    margin: 0\n}\n```\n\n# CSS 背景(background)\n\nCSS 可以添加背景颜色和背景图片，以及来进行图片设置。\n\n| background-color                                            | 背景颜色         |\n| ----------------------------------------------------------- | ---------------- |\n| background-image                                            | 背景图片地址     |\n| background-repeat                                           | 是否平铺         |\n| background-position                                         | 背景位置         |\n| background-attachment                                       | 背景固定还是滚动 |\n| 背景的合写（复合属性）                                      |                  |\n| background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置 |                  |\n\n## 背景图片(image)\n\n```html\n语法： background-image : none | url (url) \n参数： \nnone : 　无背景图（默认的）\nurl : 　使用绝对或相对地址指定背景图像 \nbackground-image 属性允许指定一个图片展示在背景中（只有CSS3才可以多背景）可以和 background-color 连用。 如果图片不重复的话，图片覆盖不到地地方都会被背景色填充。 如果有背景图片平铺，则会覆盖背景颜色。\n小技巧：  我们提倡 背景图片后面的地址，url不要加引号。\n```\n\n## 背景平铺（repeat）\n\n```HTML\n语法：background-repeat : repeat | no-repeat | repeat-x | repeat-y \n参数： \nrepeat : 　背景图像在纵向和横向上平铺（默认的）\nno-repeat : 　背景图像不平铺\nrepeat-x : 　背景图像在横向上平铺\nrepeat-y : 　背景图像在纵向平铺 \n设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。\n```\n\n## 背景位置(position)\n\n```html\n语法：background-position : length || length\nbackground-position : position || position \n参数： \nlength : 　百分数 | 由浮点数字和单位标识符组成的长度值。请参阅长度单位 \nposition : 　top | center | bottom | left | center | right \n说明： \n设置或检索对象的背景图像位置。必须先指定background-image属性。默认值为：(0% 0%)。\n如果只指定了一个值，该值将用于横坐标。纵坐标将默认为50%。第二个值将用于纵坐标。\n注意：\n1. position 后面是x坐标和y坐标。 可以使用方位名词或者 精确单位。\n2. 如果和精确单位和方位名字混合使用，则必须是x坐标在前，y坐标后面。比如 background-position: 15px top;   则 15px 一定是  x坐标   top是 y坐标。\n实际用的最多的，就是背景图片居中对齐了。\n```\n\n## 背景附着\n\n```html\n语法：background-attachment : scroll | fixed \n参数： \nscroll : 　背景图像是随对象内容滚动\nfixed : 　背景图像固定 \n说明： \n设置或检索背景图像是随对象内容滚动还是固定的。\n```\n\n## 背景简写\n\n```html\nbackground属性的值的书写顺序官方并没有强制标准的。为了可读性，建议大家如下写：\nbackground:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置\nbackground: transparent url(image.jpg) repeat-y  scroll 50% 0 ;\n```\n\n## 背景透明(CSS3)\n\n```html\nCSS3支持背景半透明的写法语法格式是:background: rgba(0,0,0,0.3);\n 最后一个参数是alpha 透明度  取值范围 0~1之间\n 注意：  背景半透明是指盒子背景半透明， 盒子里面的内容不受影响。\n```\n\n### 背景缩放(CSS3)\n\n```html\n通过background-size设置背景图片的尺寸，就像我们设置img的尺寸一样，在移动Web开发中做屏幕适配应用非常广泛。\n其参数设置如下：\na) 可以设置长度单位(px)或百分比（设置百分比时，参照盒子的宽高）\nb) 设置为cover时，会自动调整缩放比例，保证图片始终填充满背景区域，如有溢出部分则会被隐藏。我们平时用的cover 最多\nc) 设置为contain会自动调整缩放比例，保证图片始终完整显示在背景区域。\nbackground-image: url('images/1.jpg');\n      background-size: 300px 100px;\n      /* background-size: contain; */\n      /* background-size: cover; */\n```\n\n## 多背景(CSS3)\n\n```html\n以逗号分隔可以设置多背景，可用于自适应布局  做法就是 用逗号隔开就好了。\n- 一个元素可以设置多重背景图像。 \n- 每组属性间使用逗号分隔。 \n- 如果设置的多重背景图之间存在着交集（即存在着重叠关系），前面的背景图会覆盖在后面的背景图之上。\n- 为了避免背景色将图像盖住，背景色通常都定义在最后一组上。\nbackground:url(test1.jpg) no-repeat scroll 10px 20px/50px 60px  ,\n     url(test1.jpg) no-repeat scroll 10px 20px/70px 90px ,\n     url(test1.jpg) no-repeat scroll 10px 20px/110px 130px c #aaa;\n```\n\n### 凹凸文字案例\n\n```HTML\n<head>\n        <meta charset=\"utf-8\">\n        <style>\n        body {\n          background-color: #ccc;\n        }\n    div {\n      color: #ccc;\n      font: 700 80px \"微软雅黑\";\n    }\n    div:first-child {\n      /* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */\n      text-shadow: 1px 1px 1px #000, -1px -1px 1px #fff;\n    }\n    div:last-child {\n      /* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */\n      text-shadow: -1px -1px 1px #000, 1px 1px 1px #fff;\n    }\n\n        </style>\n    </head>\n    <body>\n    <div>我是凸起的文字</div>\n    <div>我是凹下的文字</div>\n    </body>\n```\n\n## 文本的修饰\n\ntext-decoration   通常我们用于给链接修改装饰效果。\n\n| 值           | 描述                                          |\n| ------------ | --------------------------------------------- |\n| none         | 默认。定义标准的文本。                        |\n| underline    | 定义文本下的一条线。下划线 也是我们链接自带的 |\n| overline     | 定义文本上的一条线。                          |\n| line-through | 定义穿过文本下的一条线。                      |\n\n**使用技巧**：在一行内的盒子内，我们设定行高等于盒子的高度，就可以使文字垂直居中。\n\n### 导航栏案例\n\n```php+HTML\n<head>\n        <meta charset=\"utf-8\">\n        <style>\n    body {\n      background-color: #000;\n    }\n    a {\n      width: 200px;\n      height: 50px;\n      /* background-color: orange; */\n      display: inline-block;  /* 把a 行内元素转换为行内块元素 */\n      text-align: center;  /* 文字水平居中 */\n      line-height: 50px;  /* 我们设定行高等于盒子的高度，就可以使文字垂直居中 */\n      color: #fff;\n      font-size: 22px;\n      text-decoration: none;  /* 取消下划线 文本装饰 */\n    }\n    a:hover {  /* 鼠标经过 给我们的链接添加背景图片*/\n      background: url(images/h.png) no-repeat; \n    }\n        </style>\n    </head>\n    <body>\n    <a href=\"#\">专区说明</a>\n    <a href=\"#\">申请资格</a>\n    <a href=\"#\">兑换奖励</a>\n    <a href=\"#\">下载游戏</a>\n    </body>\n```\n\n# CSS三大特性\n\n层叠 继承  优先级 是我们学习CSS 必须掌握的三个特性。\n\n## CSS层叠性\n\n所谓层叠性是指多种CSS样式的叠加。是浏览器处理冲突的一个能力,如果一个属性通过两个选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉。比如先给某个标签指定了内部文字颜色为红色，接着又指定了颜色为蓝色，此时出现一个标签指定了相同样式不同值的情况，这就是样式冲突。一般情况下，如果出现样式冲突，则会按照CSS书写的顺序，以最后的样式为准。\n\n应用:恰当地使用继承可以简化代码，降低CSS样式的复杂性。子元素可以继承父元素的样式（text-，font-，line-这些元素开头的都可以继承，以及color属性）\n\n## CSS优先级\n\n定义CSS样式时，经常出现两个或更多规则应用在同一元素上，这时就会出现优先级的问题。\n\n在考虑权重时，初学者还需要注意一些特殊的情况，具体如下：\n\n继承样式的权重为0。即在嵌套结构中，不管父元素样式的权重多大，被子元素继承时，他的权重都为0，也就是说子元素定义的样式会覆盖继承来的样式。\n\n行内样式优先。应用style属性的元素，其行内样式的权重非常高，可以理解为远大于100。总之，他拥有比上面提高的选择器都大的优先级。\n\n权重相同时，CSS遵循就近原则。也就是说靠近元素的样式具有最大的优先级，或者说排在最后的样式优先级最大。\n\nCSS定义了一个!important命令，该命令被赋予最大的优先级。也就是说不管权重如何以及样式位置的远近，!important都具有最大优先级。\n\n## CSS特殊性（Specificity）\n\n关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity，我们称为CSS 特性或称非凡性，它是一个衡量CSS值优先级的一个标准 具体规范入如下：\n\nspecificity用一个四位的数 字串(CSS2是三位)来表示，更像四个级别，值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。 \n\n| 继承或者* 的贡献值       | 0,0,0,0  |\n| ------------------------ | -------- |\n| 每个元素（标签）贡献值为 | 0,0,0,1  |\n| 每个类，伪类贡献值为     | 0,0,1,0  |\n| 每个ID贡献值为           | 0,1,0,0  |\n| 每个行内样式贡献值       | 1,0,0,0  |\n| 每个!important贡献值     | ∞ 无穷大 |\n\n比如的例子：\n\n```php+HTML\ndiv ul  li   ------>      0,0,0,3\n\n.nav ul li   ------>      0,0,1,2\n\na:hover      -----—>      0,0,1,1\n\n.nav a       ------>      0,0,1,1   \n\n#nav p       ----->       0,1,0,1\n```\n\n总结优先级：\n\n1. 使用了 !important声明的规则。\n2. 内嵌在 HTML 元素的 style属性里面的声明。\n3. 使用了 ID 选择器的规则。\n4. 使用了类选择器、属性选择器、伪元素和伪类选择器的规则。\n5. 使用了元素选择器的规则。\n6. 只包含一个通用选择器的规则。\n\n总结：权重是优先级的算法，层叠是优先级的表现\n\n# 盒子模型（CSS重点）\n\nCSS就三个大模块：  盒子模型 、 浮动 、 定位，其余的都是细节。\n\n所谓盒子模型就是把HTML页面中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。每个矩形都由元素的内容、内边距（padding）、边框（border）和外边距（margin）组成。\n\n## 盒子模型（Box Model）\n\n所有的文档元素（标签）都会生成一个矩形框，我们成为元素框（element box），它描述了一个文档元素在网页布局汇总所占的位置大小。因此，<strong style=\"color: #f00;\">每个盒子除了有自己大小和位置外，还影响着其他盒子的大小和位置。</strong>\n\n### 盒子边框（border）\n\n```html\n语法： border : border-width || border-style || border-color \n边框属性—设置边框样式（border-style）\n边框样式用于定义页面中边框的风格，常用属性值如下：\nnone：没有边框即忽略所有边框的宽度（默认值）\nsolid：边框为单实线(最为常用的)\ndashed：边框为虚线\ndotted：边框为点线\ndouble：边框为双实线\n```\n\n#### 表格的细线边框\n\n```php+HTML\n以前学过的html表格边框很粗，这里只需要CSS一句话就可以美观起来。 \ntable{ border-collapse:collapse; }\nborder-collapse:collapse; 表示边框合并在一起。\n```\n\n#### 盒子边框总结表\n\n|              |                                                              |                                                              |\n| ------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 设置内容     | 样式属性                                                     | 常用属性值                                                   |\n| 上边框       | border-top-style:样式; border-top-width:宽度;border-top-color:颜色;border-top:宽度 样式 颜色; |                                                              |\n| 下边框       | border-bottom-style:样式;border- bottom-width:宽度;border- bottom-color:颜色;border-bottom:宽度 样式 颜色; |                                                              |\n| 左边框       | border-left-style:样式; border-left-width:宽度;border-left-color:颜色;border-left:宽度 样式 颜色; |                                                              |\n| 右边框       | border-right-style:样式;border-right-width:宽度;border-right-color:颜色;border-right:宽度 样式 颜色; |                                                              |\n| 样式综合设置 | border-style:上边 [右边 下边 左边];                          | none无（默认）、solid单实线、dashed虚线、dotted点线、double双实线 |\n| 宽度综合设置 | border-width:上边 [右边 下边 左边];                          | 像素值                                                       |\n| 颜色综合设置 | border-color:上边 [右边 下边 左边];                          | 颜色值、#十六进制、rgb(r,g,b)、rgb(r%,g%,b%)                 |\n| 边框综合设置 | border:四边宽度 四边样式 四边颜色;                           |                                                              |\n\n#### 圆角边框(CSS3)\n\n```html\nBorder-radius: 水平半径/垂直半径；\n一般我们垂直半径都是省略的默认和水平半径一样。\nborder-radius: 左上角  右上角  右下角  左下角;\n案例:\n<style>\n  div {\n    width:200px;\n    height:200px;\n    border:1px solid red;\n    margin:10px 40px;\n    text-align: center;\n    line-height: 200px;\n  }\n  div:first-child {\n    border:10px solid red;\n    border-radius: 20px/50px;\n  }\n  div:nth-child(2) {\n    border-radius: 20px;\n  }\n  div:nth-child(3) {\n    border-radius: 15px 0;\n  }\n  div:nth-child(4) {\n    border-radius:100px;\n  }\n  div:nth-child(5) {\n    border-radius: 50%;\n  }\n  div:nth-child(6) {\n    border-radius: 100px 0;\n  }\n  div:nth-child(7) {\n    border-radius: 200px 0 0 0;\n  }\n  div:nth-child(8) {\n    border-radius: 100px 100px 0 0;\n    height:100px;  /*高度减半*/\n  }\n  div:nth-child(9) {\n    border-radius: 100px;\n    height:100px;\n  }\n  div:nth-child(10) {\n    border-radius: 100%;\n    height:100px;\n  }\n</style\n```\n\n### 内边距（padding）\n\n```php+HTML\npadding属性用于设置内边距。  是指 边框与内容之间的距离。\npadding-top:上内边距\npadding-right:右内边距\npadding-bottom:下内边距\npadding-left:左内边距\n```\n\n| 值的个数 | 表达意思                                                     |\n| -------- | ------------------------------------------------------------ |\n| 1个值    | padding：上下左右边距 比如padding: 3px; 表示上下左右都是3像素 |\n| 2个值    | padding: 上下边距 左右边距 比如 padding: 3px 5px; 表示 上下3像素 左右 5像素 |\n| 3个值    | padding：上边距 左右边距 下边距 比如 padding: 3px 5px 10px; 表示 上是3像素 左右是5像素 下是10像素 |\n| 4个值    | padding:上内边距 右内边距 下内边距 左内边距 比如: padding: 3px 5px 10px 15px; 表示 上3px 右是5px 下 10px 左15px 顺时针 |\n\n### 外边距（margin）\n\n```HTML\nmargin属性用于设置外边距。  设置外边距会在元素之间创建“空白”， 这段空白通常不能放置其他内容。\nmargin-top:上外边距\nmargin-right:右外边距\nmargin-bottom:下外边距\nmargin-left:上外边距\nmargin:上外边距 右外边距  下外边距  左外边\n取值顺序跟内边距相同。\n```\n\n#### 外边距实现盒子居中\n\n```HTML\n可以让一个盒子实现水平居中，需要满足一下两个条件：\n1. 必须是块级元素。     \n2. 盒子必须指定了宽度（width）\n然后就给左右的外边距都设置为auto，就可使块级元素水平居中。\n实际工作中常用这种方式进行网页布局，示例代码如下：\n.header{ width:960px; margin:0 auto;}\n```\n\n#### 清除元素的默认内外边距\n\n```HTML\n为了更方便地控制网页中的元素，制作网页时，可使用如下代码清除元素的默认内外边距： \n* {\n   padding:0;         /* 清除内边距 */\n   margin:0;          /* 清除外边距 */\n}\n```\n\n#### 外边距合并\n\n使用margin定义块元素的垂直外边距时，可能会出现外边距的合并。\n\n##### 相邻块元素垂直外边距的合并\n\n当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。\n\n![](CSS/css_2-1.jpg) \n\n解决方案：  避免就好了。\n\n##### 嵌套块元素垂直外边距的合并\n\n对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的较大者，即使父元素的上外边距为0，也会发生合并。\n\n![](CSS/css_2-2.jpg) \n\n解决方案：\n\n1. 可以为父元素定义1像素的上边框或上内边距。\n2. 可以为父元素添加overflow:hidden。\n\n## content宽度和高度\n\n```HTML\n使用宽度属性width和高度属性height可以对盒子的大小进行控制。\nwidth和height的属性值可以为不同单位的数值或相对于父元素的百分比%，实际工作中最常用的是像素值。\n大多数浏览器，如Firefox、IE6及以上版本都采用了W3C规范，符合CSS规范的盒子模型的总宽度和总高度的计算原则是：\n盒子的总宽度= width+左右内边距之和+左右边框宽度之和+左右外边距之和\n盒子的总高度= height+上下内边距之和+上下边框宽度之和+上下外边距之和\n注意：\n1、宽度属性width和高度属性height仅适用于块级元素，对行内元素无效（ img 标签和 input除外）。\n2、计算盒子模型的总高度时，还应考虑上下两个盒子垂直外边距合并的情况。\n```\n\n## 盒子模型布局稳定性\n\n```HTML\n我们根据稳定性来分，建议如下：\n按照 优先使用宽度 （width）  其次 使用内边距（padding）再次外边距（margin）。\n  width >  padding  >   margin   \n原因：\n1. margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。\n2. padding  会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。\n3. width   没有问题,我们经常使用宽度剩余法 高度剩余法来做。\n```\n\n## CSS3盒模型\n\n```HTML\nCSS3中可以通过box-sizing 来指定盒模型，即可指定为content-box、border-box，这样我们计算盒子大小的方式就发生了改变。\n可以分成两种情况：\n1、box-sizing: border-box  盒子大小为 width\n2、box-sizing: content-box  盒子大小为 width + padding + border\n注：上面的标注的width指的是CSS属性里设置的width: length，content的值是会自动调整的。\n\n- `content-box` 是默认值。如果你设置一个元素的宽为100px，那么这个元素的内容区会有100px 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。\n- `border-box` 告诉浏览器：你想要设置的边框和内边距的值是包含在width内的。也就是说，如果你将一个元素的width设为100px，那么这100px会包含它的border和padding，内容区的实际宽度是width减去(border + padding)的值。大多数情况下，这使得我们更容易地设定一个元素的宽高。\n- 注： `border-box`不包含`margin` \n```\n\n## 盒子阴影\n\n```HTML\n语法格式：box-shadow:水平阴影 垂直阴影 模糊距离 阴影尺寸 阴影颜色  内/外阴影；\n1. 前两个属性是必须写的。其余的可以省略。\n2. 外阴影 (outset) 不能写默认，想要内阴影  inset 未完成\nimg {\n  border:10px solid orange;\n  box-shadow:3px 3px 5px 4px rgba(0,0,0,1);\n}\n```\n\n| 值       | 描述                                   |\n| -------- | -------------------------------------- |\n| h-shadow | 必需。水平阴影的位置。允许负值。       |\n| v-shadow | 必需。垂直阴影的位置。允许负值。       |\n| blur     | 可选。模糊距离。                       |\n| spread   | 可选。阴影的尺寸                       |\n| color    | 可选。阴影的颜色。请参阅CSS颜色值。    |\n| inset    | 可选。将外部阴影(outset)改为内部阴影。 |\n\n# 浮动(float)\n\nCSS的定位机制有3种：普通流（标准流）、浮动和定位。\n\n## 普通流(normal flow)\n\nhtml语言当中另外一个相当重要的概念----------标准流！或者普通流。普通流实际上就是一个网页内标签元素正常从上到下，从左到右排列顺序的意思，比如块级元素会独占一行，行内元素会按顺序依次前后排列；按照这种大前提的布局排列之下绝对不会出现例外的情况叫做普通流布局。\n\n## 浮动(float)\n\n浮动最早是用来控制图片，以便达到其他元素（特别是文字）实现“环绕”图片的效果。\n\n后来发现浮动有个很有意思的事情：就是让任何盒子可以一行排列,因此我们就慢慢的偏离主题，用浮动的特性来布局了。\n\n元素的浮动是指设置了浮动属性的元素会脱离标准普通流的控制，移动到其父元素中指定位置的过程。\n\n```HTML\n在CSS中，通过float属性来定义浮动，其基本语法格式如下： 选择器{float:属性值;}\n```\n\n| 属性值 | 描述                 |\n| ------ | -------------------- |\n| left   | 元素向左浮动         |\n| right  | 元素向右浮动         |\n| none   | 元素不浮动（默认值） |\n\n#### 浮动详细内幕特性\n\n浮动首先创建包含块的概念（包裹）。就是说， 浮动的元素总是找离它最近的父级元素对齐。但是不会超出内边距的范围。 \n\n![](CSS/css_3.jpg) \n\n浮动的元素排列位置，跟上一个元素（块级）有关系。如果上一个元素有浮动，则A元素顶部会和上一个元素的顶部对齐；如果上一个元素是标准流，则A元素的顶部会和上一个元素的底部对齐。\n\n![](CSS/css_4.jpg) \n\n由2可以推断出，一个父盒子里面的子盒子，如果其中一个子级有浮动的，则其他子级都需要浮动。这样才能一行对齐显示。浮动脱离标准流，不占位置，会影响标准流。浮动只有左右浮动。元素添加浮动后，元素会具有行内块元素的特性。元素的大小完全取决于定义的大小或者默认的内容多少。浮动根据元素书写的位置来显示相应的浮动。\n\n#### 清除浮动\n\n为什么要清除浮动？\n\n由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响，为了解决这些问题，此时就需要在该元素中清除浮动。\n\n清除浮动本质\n\n清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。\n\n![](CSS/css_5.jpg) \n\n![](CSS/css_6.jpg) \n\n#### 清除浮动的方法\n\n```HTML\n其实本质叫做闭合浮动更好一些, 记住，清除浮动就是把浮动的盒子圈到里面，让父盒子闭合出口和入口不让他们出来影响其他元素。\n在CSS中，clear属性用于清除浮动，其基本语法格式如下：选择器{clear:属性值;}\n```\n\n| 属性值 | 描述                                       |\n| ------ | ------------------------------------------ |\n| left   | 不允许左侧有浮动元素（清除左侧浮动的影响） |\n| right  | 不允许右侧有浮动元素（清除右侧浮动的影响） |\n| both   | 同时清除左右两侧浮动的影响                 |\n\n##### 额外标签法\n\n```html\n是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如 <div style=”clear:both”></div>，或则其他标签br等亦可。\n优点： 通俗易懂，书写方便\n缺点： 添加许多无意义的标签，结构化较差。\n```\n\n##### 父级添加overflow属性方法\n\n```HTML\n可以通过触发BFC的方式，可以实现清除浮动效果。\n可以给父级添加： overflow为 hidden|auto|scroll 都可以实现。\n优点：  代码简洁\n缺点：  内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。\n```\n\n##### 使用after伪元素清除浮动\n\n```+HTML\n使用方法：\n.clearfix:after {  content: \".\"; display: block; height: 0; clear: both; visibility: hidden;  }   \n.clearfix {*zoom: 1;}   /* IE6、7 专有 */\n优点： 符合闭合浮动思想  结构语义化正确\n缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。\n注意： content:\".\"  里面尽量跟一个小点，或者其他，尽量不要为空，否则再firefox 7.0前的版本会有生成空格。\n```\n\n##### 使用before和after双伪元素清除浮动\n\n\n```HTML\n使用方法：\n.clearfix:before,.clearfix:after { \n  content:\".\";\n  display:table;\n}\n.clearfix:after {\n clear:both;\n}\n.clearfix {\n  *zoom:1;\n}\n优点：  代码更简洁\n缺点：  由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。\n```\n\n## 定位(position)\n\n\n```HTML\n元素的定位属性主要包括定位模式和边偏移两部分。\n```\n\n1、边偏移\n\n| 边偏移属性 | 描述                                           |\n| ---------- | ---------------------------------------------- |\n| top        | 顶端偏移量，定义元素相对于其父元素上边线的距离 |\n| bottom     | 底部偏移量，定义元素相对于其父元素下边线的距离 |\n| left       | 左侧偏移量，定义元素相对于其父元素左边线的距离 |\n| right      | 右侧偏移量，定义元素相对于其父元素右边线的距离 |\n\n也就说，以后定位要和这边偏移搭配使用了， 比如 top: 100px;  left: 30px; 等等\n\n2、定位模式\n\n在CSS中，position属性用于定义元素的定位模式，其基本语法格式如下：\n\n选择器{position:属性值;}\n\nposition属性的常用值\n\n| 值       | 描述                                             |\n| -------- | ------------------------------------------------ |\n| static   | 自动定位（默认定位方式）                         |\n| relative | 相对定位，相对于其原文档流的位置进行定位         |\n| absolute | 绝对定位，相对于其上一个已经定位的父元素进行定位 |\n| fixed    | 固定定位，相对于浏览器窗口进行定位               |\n\n### 静态定位(static)\n\n静态定位是所有元素的默认定位方式，当position属性的取值为static时，可以将元素定位于静态位置。 所谓静态位置就是各个元素在HTML文档流中默认的位置。在静态定位状态下，无法通过边偏移属性（top、bottom、left或right）来改变元素的位置。\n\n### 相对定位relative\n\n相对定位是将元素相对于它在标准流中的位置进行定位，当position属性的取值为relative时，可以将元素定位于相对位置。\n\n对元素设置相对定位后，可以通过边偏移属性改变元素的位置，但是它在文档流中的位置仍然保留。如下图所示，即是一个相对定位的效果展示：\n\n![](CSS/css_7.jpg) \n\n注意：\n\n1. 相对定位最重要的一点是，它可以通过边偏移移动位置，但是原来的所占的位置，继续占有。\n2. 其次，每次移动的位置，是以自己的左上角为基点移动（相对于自己来移动位置）\n\n就是说，相对定位的盒子仍在标准流中，它后面的盒子仍以标准流方式对待它。（相对定位不脱标）\n\n如果说浮动的主要目的是 让多个块级元素一行显示，那么定位的主要价值就是 移动位置， 让盒子到我们想要的位置上去。\n\n就是说，相对定位的盒子仍在标准流中，它后面的盒子仍以标准流方式对待它。\n\n### 绝对定位absolute \n\n如果文档可滚动，绝对定位元素会随着它滚动，因为元素最终会相对于正常流的某一部分定位。\n\n当position属性的取值为absolute时，可以将元素的定位模式设置为绝对定位。\n\n注意：    绝对定位最重要的一点是，它可以通过边偏移移动位置，但是它完全脱标，完全不占位置。\n\n##### 父级没有定位\n\n若所有父元素都没有定位，以浏览器为准对齐(document文档)。\n\n![](CSS/css_8.jpg) \n\n##### 父级有定位\n\n绝对定位是将元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。 \n\n![](CSS/css_9.jpg) \n\n##### 绝对定位的盒子没有边偏移 未完成\n\n如果只是给盒子指定了 定位，但是没有给边偏移，则该盒子以标准流来显示排序，和上一个盒子的底边对齐，但是不占有位置。\n\n![](CSS/css_10.jpg) \n\n##### 子绝父相\n\n因为子级是绝对定位，不会占有位置， 可以放到父盒子里面的任何一个地方。父盒子布局时，需要占有位置，因此父亲只能是相对定位。这就是子绝父相的由来。\n\n绝对定位是将元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。 子级是绝对定位，父亲只要是定位即可（不管父亲是绝对定位还是相对定位，甚至是固定定位都可以）\n\n##### 绝对定位的盒子水平/垂直居中\n\n普通的盒子是左右margin 改为 auto就可， 但是对于绝对定位就无效了\n\n定位的盒子也可以水平或者垂直居中，有一个算法。\n\n1. 首先left 50%   父盒子的一半大小\n\n2. 然后走自己外边距负的一半值就可以了 margin-left。\n\n## 固定定位fixed(认死理型)\n\n固定定位是绝对定位的一种特殊形式，类似于 正方形是一个特殊的 矩形。它以浏览器窗口作为参照物来定义网页元素。当position属性的取值为fixed时，即可将元素的定位模式设置为固定定位。\n\n当对元素设置固定定位后，它将脱离标准文档流的控制，始终依据浏览器窗口来定义自己的显示位置。不管浏览器滚动条如何滚动也不管浏览器窗口的大小如何变化，该元素都会始终显示在浏览器窗口的固定位置。\n\n固定定位有两点：\n\n1. 固定定位的元素跟父亲没有任何关系，只认浏览器。\n2. 固定定位完全脱标，不占有位置，不随着滚动条滚动。\n\n## 叠放次序(z-index)\n\n当对多个元素同时设置定位时，定位元素之间有可能会发生重叠。\n\n在CSS中，要想调整重叠定位元素的堆叠顺序，可以对定位元素应用z-index层叠等级属性，其取值可为正整数、负整数和0。\n\n比如：  z-index: 2;\n\n注意：\n\n1. z-index的默认属性值是0，取值越大，定位元素在层叠元素中越居上。\n\n2. 如果取值相同，则根据书写顺序，后来居上。\n\n3. 后面数字一定不能加单位。\n\n4. 只有相对定位，绝对定位，固定定位有此属性，其余标准流，浮动，静态定位都无此属性，亦不可指定此属性。\n\n## 四种定位总结\n\n| 定位模式         | 是否脱标占有位置     | 是否可以使用边偏移 | 移动位置基准                     |\n| ---------------- | -------------------- | ------------------ | -------------------------------- |\n| 静态static       | 不脱标，正常模式     | 不可以             | 正常模式                         |\n| 相对定位relative | 不脱标，占有位置     | 可以               | 相对自身位置移动（自恋型）       |\n| 绝对定位absolute | 完全脱标，不占有位置 | 可以               | 相对于定位父级移动位置（拼爹型） |\n| 固定定位fixed    | 完全脱标，不占有位置 | 可以               | 相对于浏览器移动位置（认死理型） |\n\n## 定位模式转换\n\n跟浮动一样， 元素添加了绝对定位和固定定位之后， 元素模式也会发生转换， 都转换为 行内块模式，\n\n因此,比如行内元素如果添加了绝对定位或者固定定位后/浮动后，可以不用转换模式，直接给高度和宽度就可以了。\n\n## 元素的显示与隐藏\n\n在CSS中有三个显示和隐藏的单词比较常见，我们要区分开，他们分别是 display visibility 和 overflow。\n\n他们的主要目的是让一个元素在页面中消失，但是不在文档源码中删除。 最常见的是网站广告。\n\n### display 显示\n\ndisplay 设置或检索对象是否及如何显示。\n\ndisplay : none 隐藏对象 与它相反的是 display:block 除了转换为块级元素之外，同时还有显示元素的意思。\n\n特点： 隐藏之后，不再保留位置。\n\n### visibility 可见性\n\n设置或检索是否显示对象。\n\nvisible : 　对象可视\n\nhidden : 　对象隐藏\n\n特点： 隐藏之后，继续保留原有位置。\n\n### overflow 溢出\n\n检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。\n\nvisible : 　不剪切内容也不添加滚动条。\n\nauto : 　 超出自动显示滚动条，不超出不显示滚动条\n\nhidden : 　不显示超过对象尺寸的内容，超出的部分隐藏掉\n\nscroll : 　不管超出内容否，总是显示滚动条\n\n# CSS高级技巧\n\n## CSS用户界面样式\n\n所谓的界面样式， 就是更改一些用户操作样式， 比如 更改用户的鼠标样式， 表单轮廓等。但是比如滚动条的样式改动受到了很多浏览器的抵制，因此我们就放弃了。\n\n### 鼠标样式cursor\n\n```HTML\n 设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。\ncursor :  default  小白 | pointer  小手  | move  移动  |  text  文本\n鼠标放上查看效果：\n<ul>\n  <li style=\"cursor:default\">我是小白</li>\n  <li style=\"cursor:pointer\">我是小手</li>\n  <li style=\"cursor:move\">我是移动</li>\n  <li style=\"cursor:text\">我是文本</li>\n</ul>\n尽量不要用hand  因为 火狐不支持     pointer ie6以上都支持的尽量用\n```\n\n### 轮廓 outline\n\n```HTML\n 是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。\n outline : outline-color ||outline-style || outline-width \n但是我们都不关心可以设置多少，我们平时都是去掉的。\n最直接的写法是 ：  outline: 0; \n <input  type=\"text\"  style=\"outline: 0;\"/>\n```\n\n### 防止拖拽文本域resize\n\n\n```HTML\nresize：none    这个单词可以防止 火狐 谷歌等浏览器随意的拖动 文本域。\n右下角可以拖拽： <textarea></textarea>\n右下角不可以拖拽： <textarea  style=\"resize: none;\"></textarea>\n```\n\n### vertical-align 垂直对齐\n\n\n```HTML\nvertical-align : baseline |top |middle |bottom \n设置或检索对象内容的垂直对其方式。 vertical-align 不影响块级元素中的内容对齐，它只针对于 行内元素或者行内块元素，特别是行内块元素， 通常用来控制图片和表单等。我们可以通过vertical-align 控制图片和文字的垂直关系了。 默认的图片会和文字基线对齐。\nbaseline:默认的是文字和图片基线对齐\nmiddle:默认的是文字和图片居中对齐\ntop：默认的是文字和图片顶部对齐\n```\n\n### 去除图片底侧空白缝隙\n\n```HTML\n有个很重要特性你要记住： 如果一个元素没有基线，比如图片或者表单等行内块元素，则他的底线会和父级盒子的基线对齐。</strong> 这样会造成一个问题，就是图片底侧会有一个空白缝隙。\n解决的方法就是：  \n1. 给img vertical-align:middle | top等等。  让图片不要和基线对齐。\n给img 添加 display：block; 转换为块级元素就不会存在问题了。\n```\n\n### 溢出的文字隐藏\n\n#### word-break:自动换行\n\nnormal   使用浏览器默认的换行规则。\n\nbreak-all   允许在单词内换行。\n\nkeep-all    只能在半角空格或连字符处换行。\n\n#### text-overflow 文字溢出\n\ntext-overflow : clip | ellipsis\n\n设置或检索是否使用一个省略标记（...）标示对象内文本的溢出\n\nclip : 　不显示省略标记（...），而是简单的裁切 \n\nellipsis : 　当对象内文本溢出时显示省略标记（...）\n\n## CSS精灵技术（sprite）\n\n图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。\n\n然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度，出现了CSS精灵技术（也称CSS Sprites、CSS雪碧）。\n\n### 精灵技术本质\n\n简单地说，CSS精灵是一种处理网页背景图像的方式。它将一个页面涉及到的所有零星背景图像都集中到一张大图中去，然后将大图应用于网页，这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。通常情况下，这个由很多小的背景图像合成的大图被称为精灵图\n\n### 精灵技术的使用\n\nCSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图，就需要使用CSS的background-image、background-repeat和background-position属性进行背景定位，其中最关键的是使用background-position属性精确地定位。\n\n### 制作精灵图\n\nCSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），那我们要做的，就是把小图拼合成一张大图。\n\n  小公司，背景图片很少的情况，没有必要使用精灵技术，维护成本太高。 如果是背景图片比较多，可以建议使用精灵技术。\n\n### 案例：滑动门\n\n制作网页时，为了美观，常常需要为网页元素设置特殊形状的背景，比如微信官网首页导航栏，有凸起和凹下去的感觉，最大的问题是里面的字数不一样多，咋办？\n\n为了使各种特殊形状的背景能够自适应元素中文本内容的多少，出现了CSS滑动门技术。它从新的角度构建页面，使各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，可用性更强。 最常见于各种导航栏的滑动门。\n\n![](CSS/css_12.jpg) \n\n```html\n核心技术就是利用CSS精灵（主要是背景位置）和盒子padding撑开宽度, 以便能适应不同字数的导航栏。\n一般的经典布局都是这样的：\n<li>\n  <a href=\"#\">\n    <span>导航栏内容</span>\n  </a>\n</li>\n总结： \n\n1. a 设置 背景左侧，padding撑开合适宽度。    \n2. span 设置背景右侧， padding撑开合适宽度 剩下由文字继续撑开宽度。\n3. 之所以a包含span就是因为 整个导航都是可以点击的。\n```\n\n## 字体图标\n\n图片是有诸多优点的，但是缺点很明显，比如图片不但增加了总文件的大小，还增加了很多额外的\"http请求\"，这都会大大降低网页的性能的。更重要的是图片不能很好的进行“缩放”，因为图片放大和缩小会失真。 我们后面的移动端响应式，很多情况下希望我们的图标是可以缩放的。此时，一个非常重要的技术出现了。 这就是字体图标（iconfont).\n\n### 字体图标优点\n\n可以做出跟图片一样可以做的事情,改变透明度、旋转度，等..但是本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果等等...字体图标本身体积更小，但携带的信息并没有削减。几乎支持所有的浏览器，移动端设备必备良药...\n\n### 字体图标使用流程\n\n总体来说，字体图标按照如下流程：\n\n![](CSS/css_11.jpg) \n\n### 设计字体图标\n\n假如图标是我们公司单独设计，那就需要第一步了，这个属于UI设计人员的工作， 他们在 illustrator 或 Sketch 这类矢量图形软件里创建 icon图标之后保存为svg格式，然后给我们前端人员就好了。 \n\n  其实第一步，我们不需要关心，只需要给我们这些图标就可以了，如果图标是大众的，网上本来就有的，可以直接跳过第一步，进入第三步。\n\n### 上传生成字体包\n\n当UI设计人员给我们svg文件的时候，我们需要转换成我们页面能使用的字体文件， 而且需要生成的是兼容性的适合各个浏览器的。\n\n​    推荐网站： http://icomoon.io\n\n**icomoon字库**\n\nIcoMoon成立于2011年，推出的第一个自定义图标字体生成器，它允许用户选择他们所需要的图标，使它们成一字型。 内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。\n\n   推荐网站： http://www.iconfont.cn/\n\n**阿里icon font字库**\n\nhttp://www.iconfont.cn/\n\n这个是阿里妈妈M2UX的一个icon font字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用AI制作图标上传生成。 一个字，免费，免费！！\n\n**fontello**\n\n[http://fontello.com/](http://fontello.com/)\n\n在线定制你自己的icon font字体图标字库，也可以直接从GitHub下载整个图标集，该项目也是开源的。\n\n**Font-Awesome**\n\n[http://fortawesome.github.io/Font-Awesome/](http://fortawesome.github.io/Font-Awesome/)\n\n这是我最喜欢的字库之一了，更新比较快。目前已经有369个图标了。\n\n**Glyphicon Halflings**\n\n[http://glyphicons.com/](http://glyphicons.com/)\n\n这个字体图标可以在Bootstrap下免费使用。自带了200多个图标。\n\n**Icons8**\n\n[https://icons8.com/](https://icons8.com/)\n\n提供PNG免费下载，像素大能到500px\n\n### 下载兼容字体包\n\n刚才上传完毕， 网站会给我们把UI做的svg图片转换为我们的字体格式， 然后下载下来就好了\n\n当然，我们不需要自己专门的图标，是想网上找几个图标使用，以上2步可以直接省略了， 直接到刚才的网站上找喜欢的下载使用吧。\n\n### 字体引入到HTML\n\n```HTML\n最后一步，是最重要的一步了， 就是字体文件已经有了，我们需要引入到我们页面中。\n1. 首先把 4个文件(.eot,.svg,.ttf,.woff)放入到 fonts文件夹里面。 通俗的做法\n第一步：引入项目下面生成的fontclass代码：\n<link rel=\"stylesheet\" type=\"text/CSS\" href=\"./iconfont.CSS\">\n第二步：挑选相应图标并获取类名，应用于页面：\n<i class=\"iconfont icon-xxx\"></i>\n```\n\n## 伸缩布局Flex(CSS3)\n\nCSS3在布局方面做了非常大的改进，使得我们对块级元素的布局排列变得十分灵活，适应性非常强，其强大的伸缩性，在响应式开中可以发挥极大的作用。\n\n主轴：Flex容器的主轴主要用来配置Flex项目，默认是水平方向\n\n侧轴：与主轴垂直的轴称作侧轴，默认是垂直方向的\n\n方向：默认主轴从左向右，侧轴默认从上到下\n\n主轴和侧轴并不是固定不变的，通过flex-direction可以互换。\n\n![](CSS/css_13.jpg) \n\nFlex布局的语法规范经过几年发生了很大的变化，也给Flexbox的使用带来一定的局限性，因为语法规范版本众多，浏览器支持不一致，致使Flexbox布局使用不多\n\n**各属性详解**\n\na、flex-direction调整主轴方向（默认为水平方向）\n\nb、justify-content调整主轴对齐\n\nc、align-items调整侧轴对齐\n\nd、flex-wrap控制是否换行\n\ne、align-content堆栈（由flex-wrap产生的独立行）对齐\n\nf、flex-flow是flex-direction、flex-wrap的简写形式\n\ng、flex子项目在主轴的缩放比例，不指定flex属性，则不参与伸缩分配\n\nh、order控制子项目的排列顺序，正序方式排序，从小到大\n\n此知识点重在理解，要明确找出主轴、侧轴、方向，各属性对应的属性值\n\n## 过渡(CSS3)\n\n过渡（transition)是CSS3中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。\n\n在CSS3里使用transition可以实现补间动画（过渡效果），并且当前元素只要有“属性”发生变化时即存在两种状态(我们用A和B代指），就可以实现平滑的过渡，为了方便演示采用hover切换两种状态，但是并不仅仅局限于hover状态来实现过渡。\n\n```HTML\n语法格式:\ntransition: 要过渡的属性  花费时间  运动曲线  何时开始;\n\n```\n\n| 属性                       | 描述                                         | CSS  |\n| -------------------------- | -------------------------------------------- | ---- |\n| transition                 | 简写属性，用于在一个属性中设置四个过渡属性。 | 3    |\n| transition-property        | 规定应用过渡的 CSS 属性的名称。              | 3    |\n| transition-duration        | 定义过渡效果花费的时间。默认是 0。           | 3    |\n| transition-timing-function | 规定过渡效果的时间曲线。默认是 \"ease\"。      | 3    |\n| transition-delay           | 规定过渡效果何时开始。默认是 0。             | 3    |\n\n未完成\n\n运动曲线示意图：\n\n```HTML\nimg {\n  width:80px; height: 80px; border:8px solid #ccc; border-radius: 50%;\n  transition:transform 0.5s ease-in 0s;\n}\nimg:hover {\n  transform:rotate(180deg);\n}\n```\n\n## 2D变形(CSS3)\n\n```HTML\n转换是CSS3中具有颠覆性的特征之一，可以实现元素的位移、旋转、变形、缩放，甚至支持矩阵方式，配合过渡和即将学习的动画知识，可以取代大量之前只能靠Flash才可以实现的效果。\n变形转换 transform  \n\n- 移动 translate(x, y) \ntranslate(50px,50px);\n使用translate方法来将文字或图像在水平方向和垂直方向上分别垂直移动50像素。\n可以改变元素的位置，x、y可为负值；\n translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）\n translateX(x)仅水平方向移动（X轴移动）\n translateY(Y)仅垂直方向移动（Y轴移动）\n.box {\n  width: 499.9999px;\n  height: 400px;\n  background: pink;\n  position: absolute;\n  left:50%;\n  top:50%;\n  transform:translate(-50%,-50%);  /* 走的自己的一半 */\n}\n 让定位的盒子水平居中\n\n- 缩放 scale(x, y) \ntransform:scale(0.8,1);\n可以对元素进行水平和垂直方向的缩放。该语句使用scale方法使该元素在水平方向上缩小了20%，垂直方向上不缩放。\nscale(X,Y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）\nscaleX(x)元素仅水平方向缩放（X轴缩放）\nscaleY(y)元素仅垂直方向缩放（Y轴缩放）\n scale()的取值默认的值为1，当值设置为0.01到0.99之间的任何值，作用使一个元素缩小；而任何大于或等于1.01的值，作用是让元素放大\n\n- 旋转 rotate(deg) \n可以对元素进行旋转，正值为顺时针，负值为逆时针；\ntransform:rotate(45deg);\n1. 当元素旋转以后，坐标轴也跟着发生的转变\n2. 调整顺序可以解决，把旋转放到最后\n3. 注意单位是 deg 度数\n案例旋转扑克牌\nbody {\n  background-color: skyblue;\n}\n.container {\n  width: 100px;\n  height: 150px;\n  border: 1px solid gray;\n  margin: 300px auto;\n  position: relative;\n}\n.container > img {\n  display: block;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  transform-origin: top right;\n  /* 添加过渡 */\n  transition: all 1s;\n}\n.container:hover img:nth-child(1) {\n  transform: rotate(60deg);\n}\n.container:hover img:nth-child(2) {\n  transform: rotate(120deg);\n}\n.container:hover img:nth-child(3) {\n  transform: rotate(180deg);\n}\n.container:hover img:nth-child(4) {\n  transform: rotate(240deg);\n}\n.container:hover img:nth-child(5) {\n  transform: rotate(300deg);\n}\n.container:hover img:nth-child(6) {\n  transform: rotate(360deg);\n}\n\n-倾斜 skew(deg, deg) \ntransform:skew(30deg,0deg);\n该实例通过skew方法把元素水平方向上倾斜30度，处置方向保持不变。\n可以使元素按一定的角度进行倾斜，可为负值，第二个参数不写默认为0。\ntransform-origin可以调整元素转换的原点\ndiv{transform-origin: left top;transform: rotate(45deg); }  /* 改变元素原点到左上角，然后进行顺时旋转45度 */    \n```\n\n## 3D变形\n\n左手坐标系\n\n伸出左手，让拇指和食指成“L”形，大拇指向右，食指向上，中指指向前方。这样我们就建立了一个左手坐标系，拇指、食指和中指分别代表X、Y、Z轴的正方向。CSS3中的3D坐标系与上述的3D坐标系是有一定区别的，相当于其绕着X轴旋转了180度。\n\n```HTML\nrotateX() 就是沿着 x 立体旋转.\nimg {\n  transition:all 0.5s ease 0s;\n}\nimg:hove {\n\n  transform:rotateX(180deg);\n}\nrotateY() 沿着y轴进行旋转\nimg {\n  transition:all 0.5s ease 0s;\n}\nimg:hover {\n  transform:rotateX(180deg);\n}\nrotateZ()沿着z轴进行旋转\nimg {\n  transition:all .25s ease-in 0s;\n}\nimg:hover {\n  /* transform:rotateX(180deg); */\n  /* transform:rotateY(180deg); */\n  /* transform:rotateZ(180deg); */\n  /* transform:rotateX(45deg) rotateY(180deg) rotateZ(90deg) skew(0,10deg); */\n}\n```\n\n## 透视(perspective)\n\n电脑显示屏是一个2D平面，图像之所以具有立体感（3D效果），其实只是一种视觉呈现，通过透视可以实现此目的。\n\n透视可以将一个2D平面，在转换的过程当中，呈现3D效果。\n\n注：并非任何情况下需要透视效果，根据开发需要进行设置。\n\nperspective有两种写法\n\n1. 作为一个属性，设置给父元素，作用于所有3D转换的子元素\n2. 作为transform属性的一个值，做用于元素自身\n\n```HTML\n开门案例\nbody {\n}\n.door {\n  width: 300px;\n  height: 300px;\n  margin: 100px auto;\n  border: 1px solid gray;\n  perspective: 1000px;\n  background: url('images/dog.gif') no-repeat center/cover;\n  position: relative;\n}\n.door > div {\n  box-sizing: border-box;\n  border: 1px solid black;\n}\n.left {\n  float: left;\n  width: 50%;\n  height: 100%;\n  background-color: brown;\n  transform-origin: left center;\n  transition: 1s;\n  position: relative;\n}\n.left::before {\n  content: '';\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  top: 50%;\n  right: 0px;\n  transform: translateY(-10px);\n  border: 1px solid whitesmoke;\n}\n.right {\n  width: 50%;\n  height: 100%;\n  float: left;\n  background-color: brown;\n  transform-origin: right center;\n  transition: 1s;\n  position: relative;\n}\n.right::before {\n  content: '';\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  top: 50%;\n  left: 0px;\n  transform: translateY(-10px);\n  border: 1px solid whitesmoke;\n}\n.door:hover .left {\n  transform: rotateY(-130deg);\n}\n.door:hover .right {\n  transform: rotateY(130deg);\n}\n```\n\n## 位移\n\ntranslateX(x)：仅水平方向移动**（X轴移动）\n\ntranslateY(y)：仅垂直方向移动**（Y轴移动）\n\ntranslateZ(z)：仅Z轴方向移动**（Z轴移动）\n\n```HTML\ntransformZ的直观表现形式就是大小变化，实质是XY平面相对于视点的远近变化（说远近就一定会说到离什么参照物远或近，在这里参照物就是perspective属性）。比如设置了perspective为200px;那么transformZ的值越接近200，就是离的越近，看上去也就越大，超过200就看不到了。\n```\n\n## 3D呈现（transform-style）\n\n设置内嵌的元素在 3D 空间如何呈现，这些子元素必须为转换原素。\n\nflat：所有子元素在 2D 平面呈现\n\npreserve-3d：保留3D空间\n\n3D元素构建是指某个图形是由多个元素构成的，可以给这些元素的父元素设置transform-style: preserve-3d来使其变成一个真正的3D图形。\n\n一般而言，该声明应用在3D变换的兄弟元素们的父元素上。\n\n```HTML\n翻转盒子案例(百度钱包)\nbody {\n  margin: 0;\n  padding: 0;\n  background-color: #B3C04C;\n\n}\n\n.wallet {\n  width: 300px;\n  height: 300px;\n  margin: 50px auto;\n  position: relative;\n  transform-style: preserve-3d;\n  transition: all 0.5s;\n}\n\n.wallet::before, .wallet::after {\n  content: '';\n  position: absolute;\n  left: 0;\n  top: 0;\n  display: block;\n  width: 100%;\n  height: 100%;\n  background-image: url(./images/bg.png);\n  background-repeat: no-repeat;\n}\n\n.wallet::before {\n  background-position: right top;\n  transform: rotateY(180deg);\n}\n\n.wallet::after {\n  background-position: left top;\n  transform: translateZ(2px);\n}\n\n.wallet:hover {\n  transform: rotateY(180deg);\n}\n```\n\n### 动画(CSS3)\n\n```HTML\n动画是CSS3中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。\n语法格式：animation:动画名称 动画时间 运动曲线  何时开始  播放次数  是否反方向;\n```\n\n| 属性                      | 描述                                                   | CSS  |\n| ------------------------- | ------------------------------------------------------ | ---- |\n| @keyframes                | 规定动画                                               | 3    |\n| animation                 | 所有动画属性的简写属性，除了animation-play-state属性。 | 3    |\n| animation-name            | 规定@keyframes动画的名称                               | 3    |\n| animation-duration        | 规定完成一个周期所花费的秒或毫秒。默认是0。            | 3    |\n| animation-timing-function | 规定动画的速度曲线。默认是\"ease\"。                     | 3    |\n| animation-delay           | 规定动画何时开始。默认是0。                            | 3    |\n| animation-itration-count  | 规定动画被播放的次数。默认是1。                        | 3    |\n| animation-direction       | 规定动画是否在下一周期逆向地播放。默认是\"normal\"。     | 3    |\n| animation-play-state      | 规定动画是否正在运行或暂停。默认是\"running\"。          | 3    |\n| animation-fill-mode       | 规定对象动画时间之外的状态                             | 3    |\n\n关于几个值，除了名字，动画时间，延时有严格顺序要求其它随意\n\n```HTML\n@keyframes 动画名称 {\n  from{ 开始位置 }  0%\n  to{  结束  }  100%\n}\nanimation-iteration-count:infinite;  无限循环播放\nanimation-play-state:paused;   暂停动画\"\n\n小汽车案例\n\nbody {\n  background: white;\n}\nimg {\n  width: 200px;\n}\n.animation {\n  animation-name: goback;\n  animation-duration: 5s;\n  animation-timing-function: ease;\n  animation-iteration-count: infinite;\n}\n@keyframes goback {\n  0%{}\n  49%{\n    transform: translateX(1000px);\n  }\n  55%{\n    transform: translateX(1000px) rotateY(180deg);\n  }\n  95%{\n    transform: translateX(0) rotateY(180deg);\n  }\n  100%{\n    transform: translateX(0) rotateY(0deg);\n  }\n}\n\n```\n","tags":["前端"]},{"title":"HTML5学习笔记","url":"/2019/09/13/HTML5学习笔记/","content":"# HTML5\n\n## 概述\n\n### 文档类型设定\n\ndocument\n\n- HTML:\n- XHTML:\n- HTML5\n\n### 字符设定\n\n```HTML\n<meta http-equiv=\"charset\" content=\"utf-8\">：HTML与XHTML中建议这样去写\n<meta charset=\"utf-8\">：HTML5的标签中建议这样去写\n```\n\n## HTML5标签\n\n### 常用新标签\n\n- header：定义文档的页眉\n- nav：定义导航链接的部分\n- footer：定义文档或节的页脚\n- article：标签规定独立的自包含内容\n- section：定义文档中的节（section、区段）\n- aside：定义其所处内容之外的内容\n\n### 常用新属性\n\n\n| 属性             | 用法                                           | 含义                                        |\n| ---------------- | ---------------------------------------------- | ------------------------------------------- |\n| **placeholder**  | `<input type=\"text\" placeholder=\"请输入用户名\">` | 占位符提供可描述输入字段预期值的提示信息    |\n| **autofocus**    | `<input type=\"text\" autofocus>  `                | 规定当页面加载时 input 元素应该自动获得焦点 |\n| **multiple**     | `<input type=\"file\" multiple> `                  | 多文件上传                                  |\n| **autocomplete** |  `<input type=\"text\" autocomplete=\"off\">`        | 规定表单是否应该启用自动完成功能            |\n| **required**     | `<input type=\"text\" required>`                   | 必填项                                      |\n| **accesskey**    | `<input type=\"text\" accesskey=\"s\"> `             | 规定激活（使元素获得焦点）元素的快捷键      |\n\n### 新增的type属性值\n\n| 类型         | 使用示例                | 含义                 |\n| ------------ | ----------------------- | -------------------- |\n| **email**    | `<input type=\"email\">   ` | 输入邮箱格式         |\n| **tel**      | `<input type=\"tel\">     ` | 输入手机号码格式     |\n| **url**      | `<input type=\"url\">     ` | 输入url格式          |\n| **number**   | `<input type=\"number\">  ` | 输入数字格式         |\n| **search**   | `<input type=\"search\">  ` | 搜索框（体现语义化） |\n| **range**    | `<input type=\"range\">   ` | 自由拖动滑块         |\n| **time**     | `<input type=\"time\">    ` |                      |\n| **date**     | `<input type=\"date\">    ` |                      |\n| **datetime** | `<input type=\"datetime\">` |                      |\n| **month**    | `<input type=\"month\">   ` |                      |\n| **week**     | `<input type=\"week\">    ` |                      |\n\n### 综合案例\n\n```HTML\n`<form action=\"\">\n  <fieldset>\n    <legend>学生档案</legend>\n    <label for=\"userName\">姓名:</label>\n    <input type=\"text\" name=\"userName\" id=\"userName\" placeholder=\"请输入用户名\"> <br>\n    <label for=\"userPhone\">手机号码:</label>\n    <input type=\"tel\" name=\"userPhone\" id=\"userPhone\" pattern=\"^1\\d{10}$\"><br>\n    <label for=\"email\">邮箱地址:</label>\n    <input type=\"email\" required name=\"email\" id=\"email\"><br>\n    <label for=\"collage\">所属学院:</label>\n    <input type=\"text\" name=\"collage\" id=\"collage\" list=\"cList\" placeholder=\"请选择\"><br>\n\n    <datalist id=\"cList\">\n      <option value=\"前端与移动开发学院\"></option>\n      <option value=\"java学院\"></option>\n      <option value=\"c++学院\"></option>\n    </datalist><br>\n\n​    <label for=\"score\">入学成绩:</label>\n​    <input type=\"number\" max=\"100\" min=\"0\" value=\"0\" id=\"score\"><br>\n​    <label for=\"level\">基础水平:</label>\n​    <meter id=\"level\" max=\"100\" min=\"0\" low=\"59\" high=\"90\"></meter><br>\n​    <label for=\"inTime\">入学日期:</label>\n​    <input type=\"date\" id=\"inTime\" name=\"inTime\"><br>\n​    <label for=\"leaveTime\">毕业日期:</label>\n​    <input type=\"date\" id=\"leaveTime\" name=\"leaveTime\"><br>\n​    <input type=\"submit\">\n  </fieldset>\n</form>`\n```\n\n### 多媒体标签\n\n- embed：标签定义嵌入的内容\n- audio：播放音频\n- video：播放视频\n\n#### 多媒体embed\n\nembed可以用来插入各种多媒体，格式可以是 Midi、Wav、AIFF、AU、MP3等等。url为音频或视频文件及其路径，可以是相对路径或绝对路径。\n\n因为兼容性问题，我们这里只讲解 插入网络视频， 后面H5会讲解 audio 和video 视频多媒体。 \n\n```HTML\n<embed src=\"http://player.youku.com/player.php/sid/XMTI4MzM2MDIwOA==/v.swf\" allowFullScreen=\"true\" quality=\"high\" width=\"480\" height=\"400\" align=\"middle\" allowScriptAccess=\"always\" type=\"application/x-shockwave-flash\"></embed>\n```\n\n#### 多媒体audio\n\nHTML5通过<audio>标签来解决音频播放的问题。\n\n使用相当简单，如下所示\n\n```HTML\n<!--通过src指定音频文件路径即可-->\n<audio src=\"1.mp3\"></audio>\n```\n\n并且可以通过附加属性可以更友好控制音频的播放，如：\n\nautoplay 自动播放\n\ncontrols 是否显不默认播放控件\n\nloop 循环播放\n\n由于版权等原因，不同的浏览器可支持播放的格式是不一样的，如下图供参考\n\n当前,audio元素支持三种音频格式:\n\n|            | IE9  | Firefox 3.5 | Opera 10.5 | Chrome 3.0 | Safari 3.0 |\n| ---------- | ---- | ----------- | ---------- | ---------- | ---------- |\n| Ogg Vorbis |      | √           | √          | √          |            |\n| MP3        | √    |             |            | √          | √          |\n| Wav        |      | √           | √          |            | √          |\n\n多浏览器支持方案,\n\n```HTML\n<audio controls>\n\t<!--通过src指定多格式音频文件-->\n    <audio src=\"1.mp3\"></audio>\n    <audio src=\"1.wav\"></audio>\n    <audio src=\"1.ogg\"></audio>\n    您的浏览器不支持HTML音频播放功能!\n</audio>\n```\n\n#### 多媒体video\n\n```HTML\nHTML5通过`<video>`标签来解决音频播放的问题。\n同音频播放一样，`<video>`使用也相当简单，如下所示\n<!--通过src指定音频文件路径即可-->\n<video src=\"1.mp4\" controls=\"controls\"></audio>\n```\n\n同样，通过附加属性可以更友好的控制视频的播放\n\nautoplay 自动播放\n\ncontrols 是否显示默认播放控件\n\nloop 循环播放\n\nwidth 设置播放窗口宽度\n\nheight 设置播放窗口的高度\n\n由于版权等原因，不同的浏览器可支持播放的格式是不一样的，如下供参考：\n\n当前,video元素支持三种视频格式:\n\n|       | IE   | Firefox 3.5 | Opera 10.5 | Chrome 3.0 | Safari 3.0 |\n| ----- | ---- | ----------- | ---------- | ---------- | ---------- |\n| Ogg   | No   | 3.5+        | 10.5+      | 5.0+       | No         |\n| MPEG4 | 9.0+ | No          | No         | 5.0+       | 3.0+       |\n| WebM  | No   | 4.0+        | 10.6+      | 6.0+       | No         |","tags":["前端"]},{"title":"HTML学习笔记","url":"/2019/09/10/HTML学习笔记/","content":"\n# web 概述\n\n## 常见浏览器简介\n\n```\n浏览器是网页运行的平台，常用的浏览器有IE、火狐（Firefox）、谷歌（Chrome）、Safari和Opera等。我们平时称为五大浏览器。\n```\n\n## 浏览器内核\n\n```\n浏览器内核又可以分成两部分：渲染引擎(layout engineer 或者 Rendering Engine)和 JS 引擎。\n渲染引擎 它负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。\nJS 引擎 则是解析 Javascript 语言，执行 javascript语言来实现网页的动态效果。\n\n最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。有一个网页标准计划小组制作了一个 ACID 来测试引擎的兼容性和性能。内核的种类很多，如加上没什么人使用的非商业的免费内核，可能会有10多种，但是常见的浏览器内核可以分这四种：Trident、Gecko、Blink、Webkit。\n```\n\n（1）Trident(IE 内核)\n\n国内很多的双核浏览器的其中一核便是 Trident，美其名曰 \"兼容模式\"。\n\n代表： IE、傲游、世界之窗浏览器、Avant、腾讯 TT、猎豹安全浏览器、360 极速浏览器、百度浏览器等。\n\nWindow10 发布后，IE 将其内置浏览器命名为 Edge，Edge 最显著的特点就是新内核 EdgeHTML。\n\n（2）Gecko(firefox)\n\nGecko(Firefox 内核)： Mozilla FireFox(火狐浏览器) 采用该内核，Gecko 的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。 可惜这几年已经没落了， 比如 打开速度慢、升级频繁、猪一样的队友 flash、神一样的对手 chrome。\n\n（3） webkit(Safari)\n\nSafari 是苹果公司开发的浏览器，所用浏览器内核的名称是大名鼎鼎的 WebKit。\n\n现在很多人错误地把 webkit 叫做 chrome 内核（即使 chrome 内核已经是 blink 了），苹果感觉像被别人抢了媳妇，都哭晕再厕所里面了。\n\n代表浏览器：傲游浏览器 3、 Apple Safari (Win/Mac/iPhone/iPad)、Symbian 手机浏览器、Android 默认浏览器，\n\n（4） Chromium/Bink(chrome)\n\n在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。\n\n     大部分国产浏览器最新版都采用Blink内核。\n\n（5） Presto(Opera)\n\nPresto 是挪威产浏览器 opera 的 \"前任\" 内核，为何说是 \"前任\"，因为最新的 opera 浏览器早已将之抛弃从而投入到了谷歌怀抱了。\n\n移动端的浏览器内核主要说的是系统内置浏览器的内核。\n\n目前移动设备浏览器上常用的内核有 Webkit，Blink，Trident，Gecko 等，其中 iPhone 和 iPad 等苹果 iOS 平台主要是 WebKit，Android 4.4 之前的 Android 系统浏览器内核是 WebKit，Android4.4 系统浏览器切换到了 Chromium，内核是 Webkit 的分支 Blink，Windows Phone 8 系统浏览器内核是 Trident。\n\n## 路径\n\n路径可以分为： 相对路径和绝对路径\n\n### 绝对路径\n\n“D:\\web\\img\\logo.gif”，或完整的网络地址，例如“http://www.github.com/images/logo.gif”。\n\n### 相对路径\n\n1. 图像文件和 HTML 文件位于同一文件夹：./（推荐）或者只需输入图像文件的名称即可，如<img src=\"./logo.gif\"> ; &lt;img src=\"logo.gif\" /&gt;。\n2. 图像文件位于 HTML 文件的下一级文件夹：输入文件夹名和文件名，之间用“/”隔开，如&lt;img src=\"img/img01/logo.gif\" /&gt;。\n3. 图像文件位于 HTML 文件的上一级文件夹：在文件名之前加入“../” ，如果是上两级，则需要使用 “../ ../”，以此类推，如&lt;img src=\"../logo.gif\" /&gt;。\n\n# HTML\n\n## 概述\n\nHTML（英文 Hyper Text Markup Language 的缩写）中文译为“超文本标签语言”，主要是通过 HTML 标签对网页中的文本、图片、声音等内容进行描述。\n\n### 骨架\n\n```HTML\n<HTML>\n    <head>\n        <title></title>\n    </head>\n    <body>\n    </body>\n</HTML>\n1 HTML标签：\n\n作用所有HTML中标签的一个根节点。\n\n2 head标签：\n\n作用：用于存放：\n\ntitle,meta,base,style,script,link\n\n注意在head标签中我们必须要设置的标签是title\n\n3.title标签：\n\n作用：让页面拥有一个属于自己的标题。\n\n4.body标签：\n\n作用：页面在的主体部分，用于存放所有的HTML标签：\n\np,h,a,b,u,i,s,em,del,ins,strong,img\n```\n\n### HTML 标签分类\n\n单标签: 在 HTML 基础中，单标签就是由一个标签组成的。例如`<br>、<hr>、<img>、<input>、<param>、<meta>、<link>`。\n\n双标签: 而双标签则是由“开始标签”和“结束标签”两部分构成（这两部分是相同的）。例如`<html>、<head>、<title>、<body>、<table>、<tr>、<td>、<span>、<p>、<form>、<h1>、<h2>、<h3>、<h4>、<h5>、<h6>、<object>、<style>、<b>、<u>、<strong>、<i>、<div>、<a>、<script>、<center>`（双标签的一部分）。\n\n### HTML 标签关系\n\n标签的相互关系就分为两种：1.嵌套关系 2.并列关系\n\n### 开发工具\n\nWebStorm,VSCode,HBuilderX, Dreamweaver,Sublime\n\n### 文档类型<!DOCTYPE>\n\n这句话就是告诉我们使用哪个 html 版本？ 我们使用的是 html 5 的版本。 html 有很多版本，那我们应该告诉用户和浏览器我们使用的版本号。\n\n<!DOCTYPE> 标签位于文档的最前面，用于向浏览器说明当前文档使用哪种 HTML 或 XHTML 标准规范，必需在开头处使用<!DOCTYPE>标签为所有的XHTML文档指定XHTML版本和类型，只有这样浏览器才能按指定的文档类型进行解析。\n\n注意： 一些老网站可能用的还是老版本的文档类型比如 XHTML 之类的，但是我们学的是 HTML5,而且 HTML5 的文档类型兼容很好(向下兼容的原则)，所以大家放心的使用 HTML5 的文档类型就好了。\n\n### 字符集\n\n```HTML\n<meta charset=\"UTF-8\">\n```\n\nutf-8 是目前最常用的字符集编码方式，常用的字符集编码方式还有 gbk 和 gb2312。\n\ngb2312 简单中文 包括 6763 个汉字\n\nBIG5 繁体中文 港澳台等用\n\nGBK 包含全部中文字符 是 GB2312 的扩展，加入对繁体字的支持，兼容 GB2312\n\nUTF-8 则包含全世界所有国家需要用到的字符\n\n我们统统使用 UTF-8 字符集, 这样就避免出现字符集不统一而引起乱码的情况了。\n\n### HTML 标签的语义化\n\n所谓标签语义化，就是指通过 html 标签的内容可了解其含义。\n\nHTML 标签语义化的优点:\n\n1. 方便代码的阅读和维护\n\n2. 同时让浏览器或是网络爬虫可以很好地解析，从而更好分析其中的内容\n\n3. 使用语义化标签会具有更好地搜索引擎优化\n\n核心：合适的地方给一个最为合理的标签。\n\n语义是否良好： 当我们去掉 CSS 之后，网页结构依然组织有序，并且有良好的可读性。\n\n不管是谁都能看懂这块内容是什么。\n\n遵循的原则：先确定语义的 HTML ，再选合适的 CSS。\n\n### 标签属性\n\n使用 HTML 制作网页时，如果想让 HTML 标签提供更多的信息，可以使用 HTML 标签的属性加以设置。其基本语法格式如下：\n\n```html\n<标签名 属性1=\"属性值1\" 属性2=\"属性值2\" …> 内容 </标签名>\n```\n\n在上面的语法中，\n\n1.标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。\n\n2.属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。\n\n3.任何标签的属性都有默认值，省略该属性则取默认值。\n\n采取 键值对 的格式 key=\"value\" 的格式\n\n## HTML 标签\n\n### 排版标签\n\n| 标签名   | 语义       | 格式            |\n| -------- | ---------- | --------------- |\n| 水平线   | horizontal | `<hr />`        |\n| 换行     | break      | `<break/>`      |\n| **div**  | division   | `<div> </div>`  |\n| **span** | /          | `<span></span>` |\n\n### 文本格式化标签\n\n\n| 标签名 | 语义化      | 格式                       | 备注              |\n| ------ | ----------- | -------------------------- | ----------------- |\n| 粗体   | bold/strong | `<b></b><strong></strong>` | XHTML 推荐 strong |\n| 斜体   | /           | `<i></i><em></em>`         | XHTML 推荐 em     |\n| 删除线 | /           | `<s></s><del></del>`       | XHTML 推荐 del    |\n| 下划线 | /           | `<u></u><ins></ins>`       | XHTM 不赞成使用 u |\n\n### 图像标签 img\n\n单词缩写： image 图像\n\nHTML 网页中任何元素的实现都要依靠 HTML 标签，要想在网页中显示图像就需要使用图像标签，接下来将详细介绍图像标签<img />以及和他相关的属性。其基本语法格式如下：\n\n该语法中 src 属性用于指定图像文件的路径和文件名，他是 img 标签的必需属性。\n\n```HTML\n<img src=\"图像URL\" />\n```\n\n`<img/>`标签属性 \n\n| 属性   | 属性值                          | 描述                     |\n| ------ | ------------------------------- | ------------------------ |\n| src    | URL                             | 图像的路径               |\n| alt    | 文本                            | 图像不能显示时的替换文本 |\n| title  | 文本                            | 鼠标悬停时显示的内容     |\n| width  | 像素（XHTML 不支持%页面百分比） | 设置图片的宽度           |\n| height | 像素（XHTML 不支持%页面百分比） | 设置图片的高度           |\n| border | 数字                            | 设置图像边框的宽度       |\n\n### 链接标签 a\n\n#### 基础\n\n单词缩写： anchor 的缩写 。基本解释 锚, 铁锚 的\n\n在 HTML 中创建超链接非常简单，只需用标签环绕需要被链接的对象即可，其基本语法格式如下：\n\n```HTML\n<a href=\"跳转目标\" target=\"目标窗口的弹出方式\">文本或图像</a>\n```\n\nhref：用于指定链接目标的 url 地址，当为标签应用 href 属性时，它就具有了超链接的功能。 Hypertext Reference 的缩写。意思是超文本引用\n\ntarget：用于指定链接页面的打开方式，其取值有\\_self 和\\_blank 两种，其中\\_self 为默认值，\\_blank 为在新窗口中打开方式。\n\n注意：\n\n1.外部链接 需要添加 http:// www.baidu.com\n\n2.内部链接 直接链接内部页面名称即可 比如 < a href=\"index.html\"> 首页 </a >\n\n3.如果当时没有确定链接目标时，通常将链接标签的 href 属性值定义为“#”(即 href=\"#\")，表示该链接暂时为一个空链接。\n\n4.不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。\n\n##### 防止页面跳转的方式\n\n```HTML\n1、<a href=\"#\" >test</a>；\n\n点击链接，页面默认上滚到页的顶部， 但可以加上 onclick=\"return false\"，防止上滚到页的顶部。\n\n2、<a href=\"####\" >test</a>；\n\n使用2个到4个#，见的大多是\"####\"，也有使用\"#all\"等其他的。一个无意义的标签指定，不做任何处理。\n\n3、<a href=\"javascript：void(0);\" >test</a>；\n<a href=\"javascript：;\" >test</a>；\n\njavascript:void(0) /javascript：;表示一个死链接，执行空事件。\n```\n\n#### 锚点定位\n\n通过创建锚点链接，用户能够快速定位到目标内容。\n创建锚点链接分为两步：\n\n```HTML\n1.使用“a href=”#id名>“链接文本\"</a>创建链接文本。\n\n2.使用相应的id名标注跳转目标的位置。\n```\n\n### base 标签\n\nbase 可以设置整体链接的打开状态 ，其取值有\\_self 和\\_blank 两种，其中\\_self 为默认值，\\_blank 为在新窗口中打开方式。\n\nbase 写到 <head> </head> 之间\n\n### 常用转义字符\n\n| 特殊字符 | 描述     | 字符的代码 |\n| -------- | -------- | ---------- |\n|          | 空格符   | `&nbsp;`   |\n| ＜       | 小于号   | `&lt;`     |\n| ＞       | 大于号   | `&gt;`     |\n| ＝       | 和号     | `&amp;`    |\n| ￥       | 人民币   | `&yen;`    |\n| ©        | 版权     | `&copy;`   |\n| ®        | 注册商标 | `&reg;`    |\n| °        | 摄氏度   | `&deg;`    |\n| ±        | 正负号   | `&plusmn;` |\n| ×        | 乘号     | `&times;`  |\n| ÷        | 除号     | `&divide;` |\n| ²        | 平方     | `&sup2;`   |\n| ³        | 立方     | `&sup3;`   |\n\n### 注释标签\n\n在 HTML 中还有一种特殊的标签——注释标签。如果需要在 HTML 文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。其基本语法格式如下：\n\n```HTML\n    <!-- 注释语句 -->\n```\n\n### 列表标签\n\n#### 无序列表 ol\n\n无序列表的各个列表项之间没有顺序级别之分，是并列的。其基本语法格式如下：\n\n```HTML\n<ul>\n  <li>列表项1</li>\n  <li>列表项2</li>\n  <li>列表项3</li>\n  ......\n</ul>\n```\n\n注意：\n\n```HTML\n 1. <ul></ul>中只能嵌套<li></li>，直接在<ul></ul>标签中输入其他标签或者文字的做法是不被允许的。\n 2. <li>与</li>之间相当于一个容器，可以容纳所有元素。\n 3. 无序列表会带有自己样式属性，可以让CSS来修改样式！\n```\n\n#### 有序列表 ol\n\n有序列表即为有排列顺序的列表，其各个列表项按照一定的顺序排列定义，有序列表的基本语法格式如下：\n\n```HTML\n<ol>\n  <li>列表项1</li>\n  <li>列表项2</li>\n  <li>列表项3</li>\n  ......\n</ol>\n```\n\n#### 自定义列表\n\n常用在网站底部设计,定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。其基本语法如下：\n\n```HTML\n<dl>\n  <dt>名词1</dt>\n  <dd>名词1解释1</dd>\n  <dd>名词1解释2</dd>\n  ...\n  <dt>名词2</dt>\n  <dd>名词2解释1</dd>\n  <dd>名词2解释2</dd>\n  ...\n</dl>\n```\n\n### 表格标签 table\n\n#### 表格结构\n\n在使用表格进行布局时，可以将表格划分为头部、主体和页脚（页脚因为有兼容性问题，我们不在赘述），具体 如下所示：\n\n```HTML\n<thead></thead>：用于定义表格的头部。\n\n必须位于<table></table> 标签中，一般包含网页的logo和导航等头部信息。\n\n\n<tbody></tbody>：用于定义表格的主体。\n\n位于<table></table>标签中，一般包含网页中除头部和底部之外的其他内容。\n```\n\n#### 基本语法\n\n在 HTML 网页中，要想创建表格，就需要使用表格相关的标签。创建表格的基本语法格式如下：\n\n```HTML\n<table>\n  <tr>\n    <td>单元格内的文字</td>\n    ...\n  </tr>\n  ...\n</table>\n```\n\n在上面的语法中包含三对 HTML 标签，分别为 &lt;table&gt;&lt;/table&gt;、&lt;tr&gt;&lt;/tr&gt;、&lt;td&gt;&lt;/td&gt;，他们是创建表格的基本标签，缺一不可，下面对他们进行具体地解释。\n\n```HTML\n1.table用于定义一个表格。\n\n2.tr 用于定义表格中的一行，必须嵌套在 table /table标签中，在 table /table中包含几对 tr /tr，就有几行表格。\n\n3.td /td：用于定义表格中的单元格，必须嵌套在<tr></tr>标签中，一对 <tr> </tr>中包含几对<td></td>，就表示该行中有多少列（或多少个单元格）。\n```\n\n注意:\n\n```HTML\n1. <tr></tr>中只能嵌套<td></td>\n2. <td></td>标签，他就像一个容器，可以容纳所有的元素\n```\n\n#### 表格属性\n\n| 属性名      | 含义                                     | 常用属性值          |\n| ----------- | ---------------------------------------- | ------------------- |\n| border      | 设置表格的边框(默认 border=\"0\"无边框)    | 像素值              |\n| cellspacing | 设置单元格与单元格之间的空白间距         | 像素值(默认为 2px)  |\n| callpadding | 设置单元格内容与单元格边框之间的空白间距 | 像素值(默认为 1px)  |\n| width       | 设置表格的宽度                           | 像素值              |\n| height      | 设置表格的高度                           | 像素值              |\n| align       | 设置表格在网页中的水平对齐方式           | left、center、right |\n\n#### 表头标签\n\n表头一般位于表格的第一行或第一列，其文本加粗居中，如下图所示，即为设置了表头的表格。设置表头非常简单，只需用表头标签&lt;th&gt;&lt;/th&gt;替代相应的单元格标签&lt;td&gt;&lt;/td&gt;即可。\n\n#### 合并单元格\n\n跨行合并：rowspan 跨列合并：colspan\n\n### 表单标签 input\n\n在 HTML 中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域 3 个部分构成。\n\n表单控件：\n\n       包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。\n\n提示信息：\n\n        一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。\n\n表单域：\n\n      他相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。\n\n#### input 属性\n\n<table>\n\t<tr>\n\t    <th>属性</th>\n\t    <th>属性值</th>\n\t    <th>描述</th>  \n\t</tr >\n\t<tr >\n\t    <td rowspan=\"9\">type</td>\n\t    <td>text</td>\n\t    <td>单行文本输入框</td>\n\t</tr>\n\t<tr>\n\t    <td>password</td>\n\t    <td>密码输入框</td>\n\t</tr>\n\t<tr>\n\t    <td>radio</td>\n\t    <td>单选按钮</td>\n\t</tr>\n\t<tr>\n\t    <td>CheckBox</td>\n\t    <td>复选按钮</td>\n\t</tr>\n\t<tr><td>button</td>\n\t    <td>普通按钮</td>\n\t</tr>\n\t<tr>\n\t    <td>submit</td>\n\t    <td>提交按钮</td>\n\t</tr>\n\t<tr>\n\t    <td>reset</td>\n\t    <td>重置按钮</td>\n\t</tr>\n\t<tr>\n\t    <td>image</td>\n\t    <td>图像形式的提交按钮</td>\n\t</tr>\n\t<tr>\n\t    <td >file</td>\n\t    <td>文件域</td>\n\t</tr>\n\t<tr>\n\t    <td >name</td>\n\t    <td>用户自定义</td>\n\t    <td>控件名称</td>\n\t</tr>\n\t<tr>\n\t    <td >value</td>\n\t    <td >用户自定义</td>\n\t    <td >默认文本值</td>\n\t</tr>\n\t<tr>\n\t    <td >size</td>\n\t    <td >正整数</td>\n\t    <td >控件在页面中的显示宽度</td>\n\t</tr>\n\t<tr>\n\t    <td >checked</td>\n\t    <td >checked</td>\n\t    <td >定义选择控件默认被选中项</td>\n\t</tr>\n\t<tr>\n\t    <td >maxlength</td>\n\t    <td >正整数</td>\n\t    <td >控件允许输入的最多字符</td>\n\t</tr>\n</table>\n\n#### 标签 label\n\nlabel 标签为 input 元素定义标注（标签）。\n\n作用： 用于绑定一个表单元素, 当点击 label 标签的时候, 被绑定的表单元素就会获得输入焦点\n\n如何绑定元素呢？\n\nfor 属性规定 label 与哪个表单元素绑定。\n\n```HTML\n<label for=\"male\">Male</label>\n<input type=\"radio\" name=\"sex\" id=\"male\" value=\"male\">\n```\n\n#### 文本域 textarea\n\n如果需要输入大量的信息，就需要用到&lt;textarea&gt;&lt;/textarea&gt;标签。通过 textarea 控件可以轻松地创建多行文本输入框，其基本语法格式如下：\n\n```HTML\n<textarea cols=\"每行中的字符数\" rows=\"显示的行数\">\n  文本内容\n</textarea>\n```\n\n#### 下拉菜单 select\n\n使用 select 控件定义下拉菜单的基本语法格式如下:\n\n```HTML\n<select>\n  <option>选项1</option>\n  <option>选项2</option>\n  <option>选项3</option>\n  ...\n</select>\n```\n\n注意：\n\n1. &lt;select&gt;</select&gt;中至少应包含一对&lt;option></option&gt;。\n2. 在 option 中定义 selected =\" selected \"时，当前项即为默认选中项。\n\n#### 表单域\n\n在 HTML 中，form 标签被用于定义表单域，即创建一个表单，以实现用户信息的收集和传递，form 中的所有内容都会被提交给服务器。创建表单的基本语法格式如下：\n\n```HTML\n<form action=\"url地址\" method=\"提交方式\" name=\"表单名称\">\n  各种表单控件\n</form>\n```\n\n常用属性：\n\n1. Action\n   在表单收集到信息后，需要将信息传递给服务器进行处理，action 属性用于指定接收并处理表单数据的服务器程序的 url 地址。\n2. method\n   用于设置表单数据的提交方式，其取值为 get 或 post。\n3. name\n   用于指定表单的名称，以区分同一个页面中的多个表单。\n\n注意： 每个表单都应该有自己表单域。\n","tags":["前端"]}]